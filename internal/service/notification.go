package service

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"p2pTG-crypto-exchange/internal/model"
)

// NotificationService –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type NotificationService struct {
	telegramToken string                                                 // –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	httpClient    *http.Client                                           // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram Bot API
	templates     map[model.NotificationType]*model.NotificationTemplate // –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	webAppURL     string                                                 // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
}

// NewNotificationService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewNotificationService(telegramToken, webAppURL string) *NotificationService {
	log.Println("[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

	service := &NotificationService{
		telegramToken: telegramToken,
		httpClient:    &http.Client{Timeout: 10 * time.Second}, // HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫
		templates:     make(map[model.NotificationType]*model.NotificationTemplate),
		webAppURL:     webAppURL,
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	service.initTemplates()

	return service
}

// initTemplates –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
func (ns *NotificationService) initTemplates() {
	log.Println("[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

	// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É
	ns.templates[model.NotificationTypeNewResponse] = &model.NotificationTemplate{
		Type:        model.NotificationTypeNewResponse,
		Title:       "üîî –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É",
		Message:     "–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É %s %s %s –ø–æ –∫—É—Ä—Å—É %.2f %s –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s.\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: \"%s\"\n\nüìä –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏: %.8f %s (%.2f %s)",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –∑–∞—è–≤–∫–∏ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
	ns.templates[model.NotificationTypeResponseAccepted] = &model.NotificationTemplate{
		Type:        model.NotificationTypeResponseAccepted,
		Title:       "‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!",
		Message:     "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ %s –ø—Ä–∏–Ω—è–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ %s %s %s.\n\nüí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: %.8f %s (%.2f %s)\n\nüöÄ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏.",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
	ns.templates[model.NotificationTypeResponseRejected] = &model.NotificationTemplate{
		Type:        model.NotificationTypeResponseRejected,
		Title:       "‚ùå –û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω",
		Message:     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ %s –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ %s %s %s.\n\nüìù –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏!",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
	ns.templates[model.NotificationTypeDealCreated] = &model.NotificationTemplate{
		Type:        model.NotificationTypeDealCreated,
		Title:       "ü§ù –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
		Message:     "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #%d –º–µ–∂–¥—É –≤–∞–º–∏ –∏ %s.\n\nüìã –î–µ—Ç–∞–ª–∏:\n‚Ä¢ %s %s %s\n‚Ä¢ –û–±—ä–µ–º: %.8f %s\n‚Ä¢ –ö—É—Ä—Å: %.2f %s\n‚Ä¢ –°—É–º–º–∞: %.2f %s\n\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
	ns.templates[model.NotificationTypeDealConfirmed] = &model.NotificationTemplate{
		Type:        model.NotificationTypeDealConfirmed,
		Title:       "‚úîÔ∏è –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
		Message:     "%s –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–≤–æ—é —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ #%d.\n\nüìã –°—Ç–∞—Ç—É—Å:\n‚Ä¢ %s ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n‚Ä¢ %s ‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ/–æ—Ç–ø—Ä–∞–≤–∫—É –ø–ª–∞—Ç–µ–∂–∞.",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏
	ns.templates[model.NotificationTypeDealCompleted] = &model.NotificationTemplate{
		Type:        model.NotificationTypeDealCompleted,
		Title:       "üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
		Message:     "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–¥–µ–ª–∫–∞ #%d —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\nüìä –ò—Ç–æ–≥–∏:\n‚Ä¢ –û–±—ä–µ–º: %.8f %s\n‚Ä¢ –°—É–º–º–∞: %.2f %s\n‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏: %s –∏ %s\n\n‚≠ê –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞!",
		Description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏",
	}

	// –®–∞–±–ª–æ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	ns.templates[model.NotificationTypeSystemMessage] = &model.NotificationTemplate{
		Type:        model.NotificationTypeSystemMessage,
		Title:       "üîß –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
		Message:     "%s",
		Description: "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
	}

	log.Printf("[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %d", len(ns.templates))
}

// CreateNotification —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ns *NotificationService) CreateNotification(req *model.CreateNotificationRequest) (*model.Notification, error) {
	log.Printf("[INFO] –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=%d", req.Type, req.UserID)

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	template, exists := ns.templates[req.Type]
	if !exists {
		log.Printf("[WARN] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", req.Type)
		return nil, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", req.Type)
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	notification := &model.Notification{
		UserID:     req.UserID,
		Type:       req.Type,
		Status:     model.NotificationStatusPending,
		Title:      req.Title,
		Message:    req.Message,
		Data:       req.Data,
		OrderID:    req.OrderID,
		ResponseID: req.ResponseID,
		DealID:     req.DealID,
		CreatedAt:  time.Now(),
		RetryCount: 0,
	}

	// –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω
	if notification.Title == "" {
		notification.Title = template.Title
	}
	if notification.Message == "" {
		notification.Message = template.Message
	}

	log.Printf("[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: Type=%s, Title=%s", notification.Type, notification.Title)
	return notification, nil
}

// SendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
func (ns *NotificationService) SendNotification(notification *model.Notification, userTelegramID int64) error {
	log.Printf("[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID=%d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é TelegramID=%d",
		notification.ID, userTelegramID)

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
	message := &model.TelegramMessage{
		ChatID:                userTelegramID,
		Text:                  ns.formatNotificationMessage(notification),
		ParseMode:             "HTML", // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		DisableWebPagePreview: true,   // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
		DisableNotification:   false,  // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	}

	// –î–æ–±–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
	message.ReplyMarkup = ns.createInlineKeyboard(notification)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
	if err := ns.sendTelegramMessage(message); err != nil {
		log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %w", err)
	}

	log.Printf("[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é TelegramID=%d", userTelegramID)
	return nil
}

// formatNotificationMessage —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram
func (ns *NotificationService) formatNotificationMessage(notification *model.Notification) string {
	var builder strings.Builder

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	builder.WriteString(fmt.Sprintf("<b>%s</b>\n\n", notification.Title))

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	builder.WriteString(notification.Message)

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
	builder.WriteString(fmt.Sprintf("\n\n<i>üìÖ %s</i>",
		notification.CreatedAt.Format("02.01.2006 15:04")))

	return builder.String()
}

// createInlineKeyboard —Å–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (ns *NotificationService) createInlineKeyboard(notification *model.Notification) *model.TelegramInlineKeyboard {
	var buttons [][]model.TelegramInlineKeyboardButton

	switch notification.Type {
	case model.NotificationTypeNewResponse:
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏", "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
		buttons = [][]model.TelegramInlineKeyboardButton{
			{
				{Text: "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#responses", ns.webAppURL)}},
			},
			{
				{Text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", WebApp: &model.TelegramWebAppInfo{URL: ns.webAppURL}},
			},
		}

	case model.NotificationTypeResponseAccepted, model.NotificationTypeDealCreated:
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–¥–µ–ª–∫–µ", "–ú–æ–∏ —Å–¥–µ–ª–∫–∏"
		buttons = [][]model.TelegramInlineKeyboardButton{
			{
				{Text: "ü§ù –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–¥–µ–ª–∫–µ", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#my-orders", ns.webAppURL)}},
			},
			{
				{Text: "üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#my-orders", ns.webAppURL)}},
			},
		}

	case model.NotificationTypeResponseRejected:
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: "–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏"
		buttons = [][]model.TelegramInlineKeyboardButton{
			{
				{Text: "üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#orders", ns.webAppURL)}},
			},
			{
				{Text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", WebApp: &model.TelegramWebAppInfo{URL: ns.webAppURL}},
			},
		}

	case model.NotificationTypeDealConfirmed, model.NotificationTypeDealCompleted:
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏: "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–¥–µ–ª–∫–µ", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
		buttons = [][]model.TelegramInlineKeyboardButton{
			{
				{Text: "ü§ù –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–¥–µ–ª–∫–µ", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#my-orders", ns.webAppURL)}},
			},
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∑—ã–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
		if notification.Type == model.NotificationTypeDealCompleted {
			buttons = append(buttons, []model.TelegramInlineKeyboardButton{
				{Text: "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", WebApp: &model.TelegramWebAppInfo{URL: fmt.Sprintf("%s/#profile", ns.webAppURL)}},
			})
		}

	default:
		// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
		buttons = [][]model.TelegramInlineKeyboardButton{
			{
				{Text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", WebApp: &model.TelegramWebAppInfo{URL: ns.webAppURL}},
			},
		}
	}

	return &model.TelegramInlineKeyboard{
		InlineKeyboard: buttons,
	}
}

// sendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
func (ns *NotificationService) sendTelegramMessage(message *model.TelegramMessage) error {
	// URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", ns.telegramToken)

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ JSON
	messageData, err := json.Marshal(message)
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(messageData))
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Content-Type", "application/json")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := ns.httpClient.Do(req)
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		log.Printf("[ERROR] Telegram API –≤–µ—Ä–Ω—É–ª –∫–æ–¥ –æ—à–∏–±–∫–∏: %d", resp.StatusCode)

		// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		var errorResponse map[string]interface{}
		if err := json.NewDecoder(resp.Body).Decode(&errorResponse); err == nil {
			log.Printf("[ERROR] –û—Ç–≤–µ—Ç Telegram API: %+v", errorResponse)
		}

		return fmt.Errorf("Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: –∫–æ–¥ %d", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	var response map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		log.Printf("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Telegram API: %v", err)
		// –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "ok" –≤ –æ—Ç–≤–µ—Ç–µ
	if ok, exists := response["ok"]; exists {
		if okBool, isBool := ok.(bool); isBool && !okBool {
			log.Printf("[ERROR] Telegram API –≤–µ—Ä–Ω—É–ª ok=false: %+v", response)
			return fmt.Errorf("Telegram API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
		}
	}

	log.Printf("[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ChatID=%d, Length=%d",
		message.ChatID, len(message.Text))

	return nil
}

// safeDerefInt64 –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–∑—ã–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ int64
func (ns *NotificationService) safeDerefInt64(ptr *int64) int64 {
	if ptr == nil {
		return 0
	}
	return *ptr
}

// GetNotificationTemplates –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (ns *NotificationService) GetNotificationTemplates() map[model.NotificationType]*model.NotificationTemplate {
	return ns.templates
}

// FormatResponseNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
func (ns *NotificationService) FormatResponseNotification(order *model.Order, response *model.Response, responderName string) (string, string) {
	template := ns.templates[model.NotificationTypeNewResponse]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		strings.ToUpper(string(order.Type)), // BUY/SELL
		order.Cryptocurrency,                // BTC
		order.FiatCurrency,                  // RUB
		order.Price,                         // 2850000.00
		order.FiatCurrency,                  // RUB
		responderName,                       // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
		response.Message,                    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–≥–æ—Å—è
		order.Amount,                        // 0.01000000
		order.Cryptocurrency,                // BTC
		order.TotalAmount,                   // 28500.00
		order.FiatCurrency,                  // RUB
	)

	return title, message
}

// FormatAcceptedResponseNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–æ–º –æ—Ç–∫–ª–∏–∫–µ
func (ns *NotificationService) FormatAcceptedResponseNotification(order *model.Order, authorName string) (string, string) {
	template := ns.templates[model.NotificationTypeResponseAccepted]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		authorName,                          // –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
		strings.ToUpper(string(order.Type)), // BUY/SELL
		order.Cryptocurrency,                // BTC
		order.FiatCurrency,                  // RUB
		order.Amount,                        // 0.01000000
		order.Cryptocurrency,                // BTC
		order.TotalAmount,                   // 28500.00
		order.FiatCurrency,                  // RUB
	)

	return title, message
}

// FormatRejectedResponseNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
func (ns *NotificationService) FormatRejectedResponseNotification(order *model.Order, authorName string) (string, string) {
	template := ns.templates[model.NotificationTypeResponseRejected]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		authorName,                          // –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
		strings.ToUpper(string(order.Type)), // BUY/SELL
		order.Cryptocurrency,                // BTC
		order.FiatCurrency,                  // RUB
	)

	return title, message
}

// FormatDealCreatedNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
func (ns *NotificationService) FormatDealCreatedNotification(deal *model.Deal, counterpartyName string) (string, string) {
	template := ns.templates[model.NotificationTypeDealCreated]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		deal.ID,                                 // –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏
		counterpartyName,                        // –ò–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
		strings.ToUpper(string(deal.OrderType)), // BUY/SELL
		deal.Cryptocurrency,                     // BTC
		deal.FiatCurrency,                       // RUB
		deal.Amount,                             // 0.01000000
		deal.Cryptocurrency,                     // BTC
		deal.Price,                              // 2850000.00
		deal.FiatCurrency,                       // RUB
		deal.TotalAmount,                        // 28500.00
		deal.FiatCurrency,                       // RUB
	)

	return title, message
}

// FormatDealConfirmedNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
func (ns *NotificationService) FormatDealConfirmedNotification(deal *model.Deal, confirmedByName string, waitingForName string) (string, string) {
	template := ns.templates[model.NotificationTypeDealConfirmed]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		confirmedByName, // –ö—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
		deal.ID,         // –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏
		confirmedByName, // –ö—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (–ø–æ–≤—Ç–æ—Ä–Ω–æ)
		waitingForName,  // –ö—Ç–æ –µ—â–µ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
	)

	return title, message
}

// FormatDealCompletedNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ
func (ns *NotificationService) FormatDealCompletedNotification(deal *model.Deal, authorName string, counterpartyName string) (string, string) {
	template := ns.templates[model.NotificationTypeDealCompleted]

	title := template.Title
	message := fmt.Sprintf(template.Message,
		deal.ID,             // –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏
		deal.Amount,         // 0.01000000
		deal.Cryptocurrency, // BTC
		deal.TotalAmount,    // 28500.00
		deal.FiatCurrency,   // RUB
		authorName,          // –ò–º—è –∞–≤—Ç–æ—Ä–∞
		counterpartyName,    // –ò–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
	)

	return title, message
}
