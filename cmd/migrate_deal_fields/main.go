package main

import (
	"database/sql"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	_ "github.com/lib/pq"
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º DATABASE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	databaseURL := os.Getenv("DATABASE_URL")
	if databaseURL == "" {
		log.Fatal("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := sql.Open("postgres", databaseURL)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å ping –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")

	// –ß–∏—Ç–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
	migrationPath := "sql/migrations/005_rename_deal_confirmation_fields.sql"
	migrationSQL, err := ioutil.ReadFile(migrationPath)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %v", migrationPath, err)
	}

	log.Printf("üìÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: %s", migrationPath)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
	_, err = db.Exec(string(migrationSQL))
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã
	var authorConfirmedExists, counterConfirmedExists bool

	checkAuthorSQL := `
		SELECT EXISTS (
			SELECT 1 FROM information_schema.columns 
			WHERE table_name = 'deals' AND column_name = 'author_confirmed'
		)`

	checkCounterSQL := `
		SELECT EXISTS (
			SELECT 1 FROM information_schema.columns 
			WHERE table_name = 'deals' AND column_name = 'counter_confirmed'
		)`

	err = db.QueryRow(checkAuthorSQL).Scan(&authorConfirmedExists)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–µ author_confirmed: %v", err)
	}

	err = db.QueryRow(checkCounterSQL).Scan(&counterConfirmedExists)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–µ counter_confirmed: %v", err)
	}

	if authorConfirmedExists && counterConfirmedExists {
		log.Println("‚úÖ –ü–æ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã: author_confirmed, counter_confirmed")
	} else {
		log.Println("‚ö†Ô∏è –ü–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
	}

	fmt.Println()
	fmt.Println("üéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
	fmt.Println("   1. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Å–¥–µ–ª–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫ –ø–æ–ª–µ–π")
	fmt.Println("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å author_confirmed/counter_confirmed")
	fmt.Println("   3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫")
}
