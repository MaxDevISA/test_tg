package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"p2pTG-crypto-exchange/internal/model"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

// migrate_data.go - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ PostgreSQL
func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö JSON ‚Üí PostgreSQL")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(); err != nil {
		log.Println("[WARN] –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
	}

	// –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	databaseURL := os.Getenv("DATABASE_URL")
	if databaseURL == "" {
		log.Fatal("[ERROR] DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º
	dataDir := os.Getenv("DATA_DIR")
	if dataDir == "" {
		dataDir = "data"
	}

	log.Printf("[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
	log.Printf("[INFO] –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: %s", dataDir)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := sql.Open("postgres", databaseURL)
	if err != nil {
		log.Fatalf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatalf("[ERROR] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %v", err)
	}
	log.Println("[INFO] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã)
	log.Println("[INFO] üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –º–∏–≥—Ä–∞—Ü–∏–π...")
	if err := runMigrations(db); err != nil {
		log.Fatalf("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}
	log.Println("[INFO] ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

	// –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	log.Println("[INFO] üì¶ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...")
	if err := migrateData(db, dataDir); err != nil {
		log.Fatalf("[ERROR] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	log.Println("[INFO] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PostgreSQL")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	log.Println("[INFO] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")
	if err := validateMigration(db); err != nil {
		log.Fatalf("[ERROR] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %v", err)
	}
	log.Println("[INFO] ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

	log.Println("")
	log.Println("üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
	log.Println("   1. –ö–æ–º–º–∏—Ç–∏—Ç—å –∏ –ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git")
	log.Println("   2. Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç —Å PostgreSQL")
	log.Println("   3. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É –¥–µ–ø–ª–æ—è–º–∏")
}

// runMigrations –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
func runMigrations(db *sql.DB) error {
	// –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	migrations := []string{
		"sql/migrations/001_initial_schema.sql",
		"sql/migrations/002_add_responses_table.sql",
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –º–∏–≥—Ä–∞—Ü–∏—é
	for _, migrationFile := range migrations {
		log.Printf("[INFO] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: %s", migrationFile)

		// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
		migrationSQL, err := ioutil.ReadFile(migrationFile)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ %s: %w", migrationFile, err)
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
		if _, err := db.Exec(string(migrationSQL)); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é %s: %w", migrationFile, err)
		}

		log.Printf("[INFO] ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: %s", migrationFile)
	}

	return nil
}

// migrateData –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ PostgreSQL
func migrateData(db *sql.DB, dataDir string) error {
	// 1. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if err := migrateUsers(db, filepath.Join(dataDir, "users.json")); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}

	// 2. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏
	if err := migrateOrders(db, filepath.Join(dataDir, "orders.json")); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: %w", err)
	}

	// 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
	if err := migrateDeals(db, filepath.Join(dataDir, "deals.json")); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫: %w", err)
	}

	// 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
	if err := migrateReviews(db, filepath.Join(dataDir, "reviews.json")); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: %w", err)
	}

	// 5. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
	if err := migrateRatings(db, filepath.Join(dataDir, "ratings.json")); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: %w", err)
	}

	return nil
}

// migrateUsers –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ users.json –≤ —Ç–∞–±–ª–∏—Ü—É users
func migrateUsers(db *sql.DB, filePath string) error {
	log.Printf("[INFO] –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ %s", filePath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		log.Printf("[WARN] –§–∞–π–ª %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", filePath)
		return nil
	}

	// –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º JSON
	var users []model.User
	if err := json.Unmarshal(data, &users); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: %w", err)
	}

	log.Printf("[INFO] –ù–∞–π–¥–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))

	// –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	for i, user := range users {
		query := `
			INSERT INTO users (
				id, telegram_id, telegram_user_id, first_name, last_name, 
				username, photo_url, is_bot, language_code, created_at, 
				updated_at, is_active, rating, total_deals, successful_deals, chat_member
			) VALUES (
				$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
			) ON CONFLICT (telegram_id) DO UPDATE SET
				first_name = EXCLUDED.first_name,
				last_name = EXCLUDED.last_name,
				username = EXCLUDED.username,
				photo_url = EXCLUDED.photo_url,
				updated_at = NOW(),
				rating = EXCLUDED.rating,
				total_deals = EXCLUDED.total_deals,
				successful_deals = EXCLUDED.successful_deals,
				chat_member = EXCLUDED.chat_member
		`

		_, err := db.Exec(query,
			user.ID, user.TelegramID, user.TelegramUserID, user.FirstName, user.LastName,
			user.Username, user.PhotoURL, user.IsBot, user.LanguageCode, user.CreatedAt,
			user.UpdatedAt, user.IsActive, user.Rating, user.TotalDeals, user.SuccessfulDeals, user.ChatMember,
		)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %w", i, err)
		}
	}

	log.Printf("[INFO] ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))
	return nil
}

// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ (orders, deals, reviews, ratings)
// –ü–æ–∫–∞ —Ä–µ–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
func migrateOrders(db *sql.DB, filePath string) error {
	log.Printf("[INFO] TODO: –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ %s", filePath)
	return nil
}

func migrateDeals(db *sql.DB, filePath string) error {
	log.Printf("[INFO] TODO: –ú–∏–≥—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ –∏–∑ %s", filePath)
	return nil
}

func migrateReviews(db *sql.DB, filePath string) error {
	log.Printf("[INFO] TODO: –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ %s", filePath)
	return nil
}

func migrateRatings(db *sql.DB, filePath string) error {
	log.Printf("[INFO] TODO: –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–∑ %s", filePath)
	return nil
}

// validateMigration –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
func validateMigration(db *sql.DB) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
	tables := []string{"users", "orders", "deals", "reviews", "ratings", "responses"}

	for _, table := range tables {
		var count int
		query := fmt.Sprintf("SELECT COUNT(*) FROM %s", table)
		if err := db.QueryRow(query).Scan(&count); err != nil {
			log.Printf("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É %s: %v", table, err)
			continue
		}
		log.Printf("[INFO] –¢–∞–±–ª–∏—Ü–∞ %s: %d –∑–∞–ø–∏—Å–µ–π", table, count)
	}

	return nil
}
