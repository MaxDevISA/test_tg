// JavaScript –¥–ª—è P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –≤ Telegram –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
let currentUser = null;           // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let currentView = 'orders';       // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
let orders = [];                  // –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
let isLoading = false;            // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE = '/api/v1';

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp API
    initTelegramWebApp();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadInitialData();
});

// ===== –†–ê–ë–û–¢–ê –° TELEGRAM WEBAPP API =====
function initTelegramWebApp() {
    console.log('[INFO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        const tg = Telegram.WebApp;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥ Telegram
        setTelegramTheme(tg);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        tg.BackButton.show();
        tg.BackButton.onClick(function() {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            if (currentView !== 'orders') {
                showView('orders');
            } else {
                tg.close();
            }
        });
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.expand();
        
        // –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –ø–æ–∫–∞–∑—É
        tg.ready();
        
        console.log('[INFO] Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        authenticateUser();
    } else {
        console.log('[WARN] Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞');
        
        // –í –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        showBrowserTestMode();
    }
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ Telegram
function setTelegramTheme(tg) {
    const root = document.documentElement;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã Telegram
    if (tg.themeParams) {
        root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
        root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
        root.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
        root.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#0088cc');
        root.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#0088cc');
        root.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        root.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f1f1f1');
    }
}

// –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
function showBrowserTestMode() {
    const header = document.querySelector('.header');
    if (header) {
        header.innerHTML = `
            <h1>üîÑ P2P –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞</h1>
            <div class="user-info">–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</div>
        `;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadTestData();
}

// ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
function authenticateUser() {
    console.log('[INFO] –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const tg = Telegram.WebApp;
    const initData = tg.initData;
    
    if (!initData) {
        console.log('[WARN] –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        return;
    }
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authData = parseInitData(initData);
    
    if (!authData.user) {
        console.log('[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    fetch(`${API_BASE}/auth/login`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(authData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.user) {
            currentUser = data.user;
            console.log('[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.first_name);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateUserInfo();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            loadUserData();
        } else {
            console.log('[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data.error);
            showError(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    })
    .catch(error => {
        console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    });
}

// –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram
function parseInitData(initData) {
    const params = new URLSearchParams(initData);
    const user = JSON.parse(params.get('user') || '{}');
    
    return {
        id: user.id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        photo_url: user.photo_url,
        auth_date: parseInt(params.get('auth_date')),
        hash: params.get('hash')
    };
}

// ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–û–ú =====
function setupEventListeners() {
    console.log('[INFO] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', function() {
            const view = this.dataset.view;
            showView(view);
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    const createOrderBtn = document.getElementById('createOrderBtn');
    if (createOrderBtn) {
        createOrderBtn.addEventListener('click', showCreateOrderModal);
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.modal-close').forEach(closeBtn => {
        closeBtn.addEventListener('click', function() {
            closeModal(this.closest('.modal').id);
        });
    });
    
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    const createOrderForm = document.getElementById('createOrderForm');
    if (createOrderForm) {
        createOrderForm.addEventListener('submit', handleCreateOrder);
    }
    
    // –§–∏–ª—å—Ç—Ä—ã –∑–∞—è–≤–æ–∫
    const filters = document.querySelectorAll('.filter-select');
    filters.forEach(filter => {
        filter.addEventListener('change', applyFilters);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function showView(viewName) {
    console.log(`[INFO] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª: ${viewName}`);
    
    currentView = viewName;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
        if (item.dataset.view === viewName) {
            item.classList.add('active');
        }
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.view').forEach(view => {
        view.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    const targetView = document.getElementById(viewName + 'View');
    if (targetView) {
        targetView.classList.remove('hidden');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    loadViewData(viewName);
}

// ===== –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò =====
function loadInitialData() {
    console.log('[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    showView('orders');
}

function loadUserData() {
    if (!currentUser) return;
    
    console.log('[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –∑–∞—è–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
}

function loadViewData(viewName) {
    switch (viewName) {
        case 'orders':
            loadOrders();
            break;
        case 'my-orders':
            loadMyOrders();
            break;
        case 'deals':
            loadDeals();
            break;
        case 'profile':
            loadProfile();
            break;
        default:
            console.log(`[WARN] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: ${viewName}`);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫
function loadOrders() {
    console.log('[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫');
    
    if (isLoading) return;
    isLoading = true;
    
    showLoading('ordersContent');
    
    fetch(`${API_BASE}/orders?limit=20&offset=0`)
        .then(response => response.json())
        .then(data => {
            isLoading = false;
            hideLoading('ordersContent');
            
            if (data.success && data.orders) {
                orders = data.orders;
                renderOrders(orders);
                console.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${orders.length}`);
            } else {
                console.log('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', data.error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏');
            }
        })
        .catch(error => {
            isLoading = false;
            hideLoading('ordersContent');
            console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:', error);
            showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        });
}

function loadTestData() {
    console.log('[INFO] –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const testOrders = [
        {
            id: 1,
            type: 'buy',
            cryptocurrency: 'BTC',
            fiat_currency: 'RUB',
            amount: 0.001,
            price: 2800000.00,
            total_amount: 2800.00,
            payment_methods: ['sberbank', 'tinkoff'],
            description: '–ü–æ–∫—É–ø–∞—é BTC, –±—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞',
            created_at: new Date().toISOString(),
            user: {
                first_name: '–ò–≤–∞–Ω',
                rating: 4.8,
                total_deals: 15
            }
        },
        {
            id: 2,
            type: 'sell',
            cryptocurrency: 'USDT',
            fiat_currency: 'RUB',
            amount: 1000,
            price: 91.50,
            total_amount: 91500.00,
            payment_methods: ['qiwi', 'yandex_money'],
            description: '–ü—Ä–æ–¥–∞—é USDT, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º',
            created_at: new Date().toISOString(),
            user: {
                first_name: '–ú–∞—Ä–∏—è',
                rating: 5.0,
                total_deals: 32
            }
        }
    ];
    
    orders = testOrders;
    renderOrders(orders);
}

// ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
function updateUserInfo() {
    if (!currentUser) return;
    
    const userInfo = document.querySelector('.user-info');
    if (userInfo) {
        userInfo.innerHTML = `
            üë§ ${currentUser.first_name} ${currentUser.last_name || ''}
            ‚≠ê ${currentUser.rating.toFixed(1)} 
            üìä ${currentUser.total_deals} —Å–¥–µ–ª–æ–∫
        `;
    }
}

function renderOrders(ordersList) {
    const content = document.getElementById('ordersContent');
    if (!content) return;
    
    if (ordersList.length === 0) {
        content.innerHTML = `
            <div class="text-center mt-md">
                <p class="text-muted">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <button class="btn btn-primary" onclick="showCreateOrderModal()">
                    –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
                </button>
            </div>
        `;
        return;
    }
    
    const ordersHTML = ordersList.map(order => {
        return `
            <div class="card order-card">
                <div class="order-type ${order.type}">${order.type === 'buy' ? '–ü–æ–∫—É–ø–∫–∞' : '–ü—Ä–æ–¥–∞–∂–∞'}</div>
                
                <div class="order-header">
                    <div class="crypto-pair">${order.cryptocurrency}/${order.fiat_currency}</div>
                    <div class="price">${formatPrice(order.price, order.fiat_currency)}</div>
                </div>
                
                <div class="order-details">
                    <div class="detail-item">
                        <span class="detail-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                        <span class="detail-value">${order.amount} ${order.cryptocurrency}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–°—É–º–º–∞:</span>
                        <span class="detail-value">${formatPrice(order.total_amount, order.fiat_currency)}</span>
                    </div>
                </div>
                
                <div class="payment-methods">
                    ${order.payment_methods.map(method => 
                        `<span class="payment-method">${getPaymentMethodName(method)}</span>`
                    ).join('')}
                </div>
                
                ${order.description ? `<p class="text-muted mb-sm">${order.description}</p>` : ''}
                
                <div class="user-rating">
                    <div class="stars">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
                    <div class="rating-text">
                        ${order.user ? order.user.first_name : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} 
                        (${order.user ? order.user.rating.toFixed(1) : '0.0'})
                        ‚Ä¢ ${order.user ? order.user.total_deals : 0} —Å–¥–µ–ª–æ–∫
                    </div>
                </div>
                
                <button class="btn btn-primary mt-sm" onclick="contactUser(${order.id})">
                    –°–≤—è–∑–∞—Ç—å—Å—è
                </button>
            </div>
        `;
    }).join('');
    
    content.innerHTML = ordersHTML;
}

// ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê =====
function showCreateOrderModal() {
    console.log('[INFO] –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    showModal('createOrderModal');
}

function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('show');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('show');
    }
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú =====
function handleCreateOrder(e) {
    e.preventDefault();
    
    console.log('[INFO] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏');
    
    const form = e.target;
    const formData = new FormData(form);
    
    const orderData = {
        type: formData.get('type'),
        cryptocurrency: formData.get('cryptocurrency'),
        fiat_currency: formData.get('fiat_currency'),
        amount: parseFloat(formData.get('amount')),
        price: parseFloat(formData.get('price')),
        payment_methods: formData.getAll('payment_methods'),
        description: formData.get('description'),
        auto_match: formData.get('auto_match') === 'on'
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!validateOrderData(orderData)) {
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch(`${API_BASE}/orders`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('[INFO] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data.order.id);
            showSuccess('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            closeModal('createOrderModal');
            form.reset();
            loadOrders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        } else {
            console.log('[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', data.error);
            showError(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
        }
    })
    .catch(error => {
        console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    });
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function validateOrderData(data) {
    if (!data.type || !data.cryptocurrency || !data.amount || !data.price) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return false;
    }
    
    if (data.amount <= 0 || data.price <= 0) {
        showError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
        return false;
    }
    
    if (!data.payment_methods || data.payment_methods.length === 0) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã');
        return false;
    }
    
    return true;
}

function formatPrice(price, currency) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: currency === 'RUB' ? 'RUB' : 'USD',
        minimumFractionDigits: 2
    }).format(price);
}

function getPaymentMethodName(method) {
    const names = {
        'bank_transfer': '–ë–∞–Ω–∫',
        'sberbank': '–°–±–µ—Ä–±–∞–Ω–∫',
        'tinkoff': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
        'qiwi': 'QIWI',
        'yandex_money': '–ÆMoney',
        'cash': '–ù–∞–ª–∏—á–Ω—ã–µ'
    };
    
    return names[method] || method;
}

function showLoading(containerId) {
    const container = document.getElementById(containerId);
    if (container) {
        container.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
            </div>
        `;
    }
}

function hideLoading(containerId) {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
}

function showError(message) {
    console.error('[ERROR]', message);
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const alert = document.createElement('div');
    alert.className = 'alert alert-danger';
    alert.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const container = document.querySelector('.container');
    if (container) {
        container.insertBefore(alert, container.firstChild);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            alert.remove();
        }, 5000);
    }
}

function showSuccess(message) {
    console.log('[SUCCESS]', message);
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    const alert = document.createElement('div');
    alert.className = 'alert alert-success';
    alert.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const container = document.querySelector('.container');
    if (container) {
        container.insertBefore(alert, container.firstChild);
        
        // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            alert.remove();
        }, 3000);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∑–∞–≥–ª—É—à–∫–∞)
function contactUser(orderId) {
    console.log(`[INFO] –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –∑–∞—è–≤–∫–µ ${orderId}`);
    showSuccess('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!');
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
function loadMyOrders() { showError('–†–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞—è–≤–∫–∏" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
function loadDeals() { showError('–†–∞–∑–¥–µ–ª "–°–¥–µ–ª–∫–∏" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }  
function loadProfile() { showError('–†–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'); }
function applyFilters() { console.log('[INFO] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤'); }
