// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏
let currentUser = null;
let tg = window.Telegram?.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramWebApp() {
    if (tg) {
        tg.ready();
        tg.expand();
        tg.disableVerticalSwipes();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        if (tg.initDataUnsafe?.user) {
            currentUser = tg.initDataUnsafe.user;
            document.querySelector('.user-info').textContent = 
                'üë§ ' + currentUser.first_name + ' ' + (currentUser.last_name || '');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
            authenticateUser();
        } else {
            showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
        document.body.style.backgroundColor = tg.backgroundColor || '#ffffff';
        
        console.log('[INFO] Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', currentUser);
    } else {
        console.warn('[WARN] Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–µ–º–æ —Ä–µ–∂–∏–º');
        document.querySelector('.user-info').textContent = 'üë§ –î–µ–º–æ —Ä–µ–∂–∏–º';
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentUser = {
            id: 123456789,
            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'testuser'
        };
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
function initNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    const views = document.querySelectorAll('.view');
    
    navItems.forEach(item => {
        item.addEventListener('click', () => {
            const viewName = item.dataset.view;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navItems.forEach(nav => nav.classList.remove('active'));
            item.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
            views.forEach(view => {
                view.style.display = view.id === viewName + 'View' ? 'block' : 'none';
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            if (viewName === 'orders') {
                loadOrders();
            }
        });
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function initModal() {
    const modal = document.getElementById('createOrderModal');
    const createBtn = document.getElementById('createOrderBtn');
    const closeBtn = document.querySelector('.modal-close');
    const form = document.getElementById('createOrderForm');
    
    createBtn.addEventListener('click', () => {
        modal.classList.add('show');
    });
    
    closeBtn.addEventListener('click', () => {
        modal.classList.remove('show');
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('show');
        }
    });
    
    form.addEventListener('submit', handleCreateOrder);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function handleCreateOrder(e) {
    e.preventDefault();
    
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }
    
    const formData = new FormData(e.target);
    const paymentMethods = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    formData.getAll('payment_methods').forEach(method => {
        paymentMethods.push(method);
    });
    
    const orderData = {
        type: formData.get('type'),
        cryptocurrency: formData.get('cryptocurrency'),
        fiat_currency: formData.get('fiat_currency'),
        amount: parseFloat(formData.get('amount')),
        price: parseFloat(formData.get('price')),
        payment_methods: paymentMethods,
        description: formData.get('description') || '',
        auto_match: formData.has('auto_match')
    };
    
    try {
        const response = await fetch('/api/v1/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-ID': currentUser.id.toString()
            },
            body: JSON.stringify(orderData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            document.getElementById('createOrderModal').classList.remove('show');
            e.target.reset();
            loadOrders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
async function loadOrders() {
    const content = document.getElementById('ordersContent');
    content.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p></div>';
    
    try {
        const response = await fetch('/api/v1/orders');
        const result = await response.json();
        
        if (result.success) {
            displayOrders(result.orders || []);
        } else {
            content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function displayOrders(orders) {
    const content = document.getElementById('ordersContent');
    
    if (orders.length === 0) {
        content.innerHTML = '<p class="text-center text-muted">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
        return;
    }
    
    const ordersHTML = orders.map(order => 
        '<div style="border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); ' +
                    'border-radius: 8px; padding: 12px; margin-bottom: 8px; ' +
                    'background: var(--tg-theme-secondary-bg-color, #f8f9fa);">' +
            '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">' +
                '<span style="font-weight: 600; color: ' + (order.type === 'buy' ? '#22c55e' : '#ef4444') + ';">' +
                    (order.type === 'buy' ? 'üü¢ –ü–æ–∫—É–ø–∫–∞' : 'üî¥ –ü—Ä–æ–¥–∞–∂–∞') +
                '</span>' +
                '<span style="font-size: 12px; color: var(--tg-theme-hint-color, #708499);">' +
                    new Date(order.created_at).toLocaleString('ru') +
                '</span>' +
            '</div>' +
            '<div style="margin-bottom: 8px;">' +
                '<strong>' + order.amount + ' ' + order.cryptocurrency + '</strong> –∑–∞ <strong>' + order.price + ' ' + order.fiat_currency + '</strong>' +
            '</div>' +
            '<div style="font-size: 12px; color: var(--tg-theme-hint-color, #708499);">' +
                '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: ' + ((order.payment_methods || []).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ') +
            '</div>' +
            (order.description ? '<div style="font-size: 12px; margin-top: 4px;">' + order.description + '</div>' : '') +
        '</div>'
    ).join('');
    
    content.innerHTML = ordersHTML;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showSuccess(message) {
    if (tg) {
        tg.showAlert(message);
    } else {
        alert('‚úÖ ' + message);
    }
}

function showError(message) {
    if (tg) {
        tg.showAlert('‚ùå ' + message);
    } else {
        alert('‚ùå ' + message);
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp
async function authenticateUser() {
    if (!currentUser) {
        showError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return;
    }

    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authData = {
            id: currentUser.id,
            first_name: currentUser.first_name || '',
            last_name: currentUser.last_name || '',
            username: currentUser.username || '',
            photo_url: currentUser.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'dummy_hash' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π hash –æ—Ç Telegram
        };

        const response = await fetch('/api/v1/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(authData)
        });

        const result = await response.json();

        if (result.success) {
            console.log('[INFO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result.user);
            document.querySelector('.user-info').textContent = 
                'üë§ ' + result.user.first_name + ' ‚≠ê' + result.user.rating.toFixed(1);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            loadOrders();
        } else {
            if (result.error && result.error.includes('–Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞')) {
                showAccessDenied();
            } else {
                showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + result.error);
            }
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
function showAccessDenied() {
    const container = document.querySelector('.container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px 20px; color: var(--tg-theme-hint-color, #708499);">
            <h2 style="color: var(--tg-theme-text-color, #000); margin-bottom: 16px;">üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
            <p style="margin-bottom: 16px; line-height: 1.5;">
                –î–æ—Å—Ç—É–ø –∫ P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞.
            </p>
            <p style="font-size: 12px; opacity: 0.8;">
                –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.
            </p>
        </div>
    `;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelector('.navigation').style.display = 'none';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initTelegramWebApp();
    initNavigation();
    initModal();
});