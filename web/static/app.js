// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏
let currentUser = null;
let currentInternalUserId = null; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
let tg = window.Telegram?.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initTelegramWebApp() {
    if (tg) {
        tg.ready();
        tg.expand();
        tg.disableVerticalSwipes();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        if (tg.initDataUnsafe?.user) {
            currentUser = tg.initDataUnsafe.user;
            document.querySelector('.user-info').textContent = 
                'üë§ ' + currentUser.first_name + ' ' + (currentUser.last_name || '');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
            authenticateUser();
        } else {
            showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
            return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
        document.body.style.backgroundColor = tg.backgroundColor || '#ffffff';
        
        console.log('[INFO] Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', currentUser);
    } else {
        console.warn('[WARN] Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–µ–º–æ —Ä–µ–∂–∏–º');
        document.querySelector('.user-info').textContent = 'üë§ –î–µ–º–æ —Ä–µ–∂–∏–º';
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        currentUser = {
            id: 123456789,
            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'testuser'
        };
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
function initNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    const views = document.querySelectorAll('.view');
    
    navItems.forEach(item => {
        item.addEventListener('click', () => {
            const viewName = item.dataset.view;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            navItems.forEach(nav => nav.classList.remove('active'));
            item.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª
            views.forEach(view => {
                view.style.display = view.id === viewName + 'View' ? 'block' : 'none';
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
            if (viewName === 'orders') {
                loadOrders();
            } else if (viewName === 'my-orders') {
                loadMyOrders();
            } else if (viewName === 'deals') {
                loadDeals();
            } else if (viewName === 'profile') {
                loadProfile();
            }
        });
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function initModal() {
    const modal = document.getElementById('createOrderModal');
    const createBtn = document.getElementById('createOrderBtn');
    const closeBtn = document.querySelector('.modal-close');
    const form = document.getElementById('createOrderForm');
    
    createBtn.addEventListener('click', () => {
        modal.classList.add('show');
    });
    
    closeBtn.addEventListener('click', () => {
        modal.classList.remove('show');
    });
    
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.classList.remove('show');
        }
    });
    
    form.addEventListener('submit', handleCreateOrder);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
async function handleCreateOrder(e) {
    e.preventDefault();
    
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }
    
    const formData = new FormData(e.target);
    const paymentMethods = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    formData.getAll('payment_methods').forEach(method => {
        paymentMethods.push(method);
    });
    
    const orderData = {
        type: formData.get('type'),
        cryptocurrency: formData.get('cryptocurrency'),
        fiat_currency: formData.get('fiat_currency'),
        amount: parseFloat(formData.get('amount')),
        price: parseFloat(formData.get('price')),
        payment_methods: paymentMethods,
        description: formData.get('description') || '',
        auto_match: formData.has('auto_match')
    };
    
    try {
        const response = await fetch('/api/v1/orders', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-ID': currentUser.id.toString()
            },
            body: JSON.stringify(orderData)
        });
        
        const result = await response.json();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', result);
        
        if (result.success) {
            console.log('[DEBUG] –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫...');
            showSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            document.getElementById('createOrderModal').classList.remove('show');
            e.target.reset();
            loadOrders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫
async function loadOrders() {
    const content = document.getElementById('ordersContent');
    content.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p></div>';
    
    try {
        const response = await fetch('/api/v1/orders');
        const result = await response.json();
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('[DEBUG] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞—è–≤–æ–∫:', result);
        
        if (result.success) {
            console.log('[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:', (result.orders || []).length);
            displayOrders(result.orders || []);
        } else {
            console.log('[DEBUG] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', result.error);
            content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
function displayOrders(orders) {
    const content = document.getElementById('ordersContent');
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('[DEBUG] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫:', orders);
    
    if (orders.length === 0) {
        console.log('[DEBUG] –ú–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç');
        content.innerHTML = '<p class="text-center text-muted">–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
        return;
    }
    
    const ordersHTML = orders.map((order, index) => {
        console.log(`[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ ${index}:`, order);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        if (!order.type || !order.amount || !order.cryptocurrency || !order.price || !order.fiat_currency) {
            console.log(`[DEBUG] –ó–∞—è–≤–∫–∞ ${index} –∏–º–µ–µ—Ç –ø—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:`, {
                type: order.type,
                amount: order.amount, 
                cryptocurrency: order.cryptocurrency,
                price: order.price,
                fiat_currency: order.fiat_currency
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—à–∞ –ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞
        const isMyOrder = currentInternalUserId && order.user_id === currentInternalUserId;
        
        return '<div style="border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); ' +
                    'border-radius: 8px; padding: 12px; margin-bottom: 8px; ' +
                    'background: var(--tg-theme-secondary-bg-color, #f8f9fa);">' +
            '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">' +
                '<span style="font-weight: 600; color: ' + (order.type === 'buy' ? '#22c55e' : '#ef4444') + ';">' +
                    (order.type === 'buy' ? 'üü¢ –ü–æ–∫—É–ø–∫–∞' : 'üî¥ –ü—Ä–æ–¥–∞–∂–∞') +
                '</span>' +
                '<span style="font-size: 12px; color: var(--tg-theme-hint-color, #708499);">' +
                    (order.created_at ? new Date(order.created_at).toLocaleString('ru') : '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞') +
                '</span>' +
            '</div>' +
            '<div style="margin-bottom: 8px;">' +
                '<strong>' + (order.amount || '?') + ' ' + (order.cryptocurrency || '?') + '</strong> –∑–∞ <strong>' + (order.price || '?') + ' ' + (order.fiat_currency || '?') + '</strong>' +
            '</div>' +
            '<div style="font-size: 12px; color: var(--tg-theme-hint-color, #708499); margin-bottom: 8px;">' +
                '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: ' + ((order.payment_methods || []).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ') +
            '</div>' +
            (order.description ? '<div style="font-size: 12px; margin-bottom: 8px;">' + order.description + '</div>' : '') +
            (!isMyOrder ? 
                '<div style="display: flex; gap: 8px; margin-top: 12px;">' +
                    '<button onclick="openUserProfile(' + (order.user_id || 0) + ')" ' +
                           'style="background: #6c757d; color: white; border: none; padding: 6px 12px; ' +
                           'border-radius: 4px; font-size: 12px; flex: 1;">üë§ –ü—Ä–æ—Ñ–∏–ª—å</button>' +
                    '<button onclick="respondToOrder(' + (order.id || 0) + ')" ' +
                           'style="background: #22c55e; color: white; border: none; padding: 6px 12px; ' +
                           'border-radius: 4px; font-size: 12px; flex: 2;">ü§ù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</button>' +
                '</div>' : 
                '<div style="margin-top: 8px; font-size: 12px; color: #007bff;">üìù –≠—Ç–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞</div>'
            ) +
        '</div>';
    }).join('');
    
    content.innerHTML = ordersHTML;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showSuccess(message) {
    if (tg) {
        tg.showAlert(message);
    } else {
        alert('‚úÖ ' + message);
    }
}

function showError(message) {
    if (tg) {
        tg.showAlert('‚ùå ' + message);
    } else {
        alert('‚ùå ' + message);
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram WebApp
async function authenticateUser() {
    if (!currentUser) {
        showError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return;
    }

    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authData = {
            id: currentUser.id,
            first_name: currentUser.first_name || '',
            last_name: currentUser.last_name || '',
            username: currentUser.username || '',
            photo_url: currentUser.photo_url || '',
            auth_date: Math.floor(Date.now() / 1000),
            hash: 'dummy_hash' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π hash –æ—Ç Telegram
        };

        const response = await fetch('/api/v1/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(authData)
        });

        const result = await response.json();

        if (result.success) {
            console.log('[INFO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result.user);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "–º–æ–∏—Ö –∑–∞—è–≤–æ–∫"
            currentInternalUserId = result.user.id;
            
            document.querySelector('.user-info').textContent = 
                'üë§ ' + result.user.first_name + ' ‚≠ê' + result.user.rating.toFixed(1);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            loadOrders();
        } else {
            if (result.error && result.error.includes('–Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞')) {
                showAccessDenied();
            } else {
                showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + result.error);
            }
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
function showAccessDenied() {
    const container = document.querySelector('.container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px 20px; color: var(--tg-theme-hint-color, #708499);">
            <h2 style="color: var(--tg-theme-text-color, #000); margin-bottom: 16px;">üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
            <p style="margin-bottom: 16px; line-height: 1.5;">
                –î–æ—Å—Ç—É–ø –∫ P2P –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞.
            </p>
            <p style="font-size: 12px; opacity: 0.8;">
                –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ.
            </p>
        </div>
    `;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelector('.navigation').style.display = 'none';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫
async function loadMyOrders() {
    console.log('[DEBUG] –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫');
    
    if (!currentUser) {
        console.log('[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }

    console.log('[DEBUG] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser);
    const content = document.getElementById('my-ordersView');
    content.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫...</p></div>';
    
    try {
        const response = await fetch('/api/v1/orders/my', {
            headers: {
                'X-Telegram-User-ID': currentUser.id.toString()
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            displayMyOrders(result.orders || []);
        } else {
            content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫:', error);
        content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∏—Ö –∑–∞—è–≤–æ–∫
function displayMyOrders(orders) {
    const content = document.getElementById('my-ordersView');
    
    if (orders.length === 0) {
        content.innerHTML = `
            <div class="text-center mt-md">
                <h2>–ú–æ–∏ –∑–∞—è–≤–∫–∏</h2>
                <p class="text-muted">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</p>
                <button class="btn btn-primary" id="createFirstOrderBtn">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏
        document.getElementById('createFirstOrderBtn').addEventListener('click', () => {
            document.getElementById('createOrderModal').classList.add('show');
        });
        return;
    }
    
    let html = '<h2 style="margin-bottom: 16px;">–ú–æ–∏ –∑–∞—è–≤–∫–∏</h2>';
    
    orders.forEach(order => {
        const statusColor = order.status === 'active' ? '#22c55e' : 
                           order.status === 'matched' ? '#f59e0b' :
                           order.status === 'completed' ? '#3b82f6' : '#ef4444';
        
        html += `
            <div style="border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); 
                        border-radius: 8px; padding: 12px; margin-bottom: 12px;
                        background: var(--tg-theme-bg-color, #ffffff);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <span style="font-weight: 600; color: ${order.type === 'buy' ? '#22c55e' : '#ef4444'};">
                        ${order.type === 'buy' ? 'üü¢ –ü–æ–∫—É–ø–∫–∞' : 'üî¥ –ü—Ä–æ–¥–∞–∂–∞'}
                    </span>
                    <span style="font-size: 12px; padding: 4px 8px; border-radius: 12px; background: ${statusColor}; color: white;">
                        ${getStatusText(order.status)}
                    </span>
                </div>
                <div style="margin-bottom: 8px;">
                    <strong>${order.amount} ${order.cryptocurrency}</strong> –∑–∞ <strong>${order.price} ${order.fiat_currency}</strong>
                </div>
                <div style="font-size: 12px; color: var(--tg-theme-hint-color, #708499);">
                    –°–æ–∑–¥–∞–Ω–æ: ${new Date(order.created_at).toLocaleString('ru')}
                </div>
                ${order.status === 'active' ? `
                <div style="margin-top: 8px;">
                    <button onclick="cancelOrder(${order.id})" style="background: #ef4444; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 12px;">
                        –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                </div>
                ` : ''}
            </div>
        `;
    });
    
    content.innerHTML = html;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫
async function loadDeals() {
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }

    const content = document.getElementById('dealsView');
    content.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫...</p></div>';
    
    try {
        const response = await fetch('/api/v1/deals', {
            headers: {
                'X-Telegram-User-ID': currentUser.id.toString()
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            displayDeals(result.deals || []);
        } else {
            content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫</p>';
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', error);
        content.innerHTML = '<p class="text-center text-muted">–û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
function displayDeals(deals) {
    const content = document.getElementById('dealsView');
    
    if (deals.length === 0) {
        content.innerHTML = `
            <div class="text-center mt-md">
                <h2>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</h2>
                <p class="text-muted">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫</p>
            </div>
        `;
        return;
    }
    
    let html = '<h2 style="margin-bottom: 16px;">–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</h2>';
    
    deals.forEach(deal => {
        const statusColor = deal.status === 'pending' ? '#f59e0b' : 
                           deal.status === 'completed' ? '#22c55e' : '#ef4444';
        
        html += `
            <div style="border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); 
                        border-radius: 8px; padding: 12px; margin-bottom: 12px;
                        background: var(--tg-theme-bg-color, #ffffff);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                    <span style="font-weight: 600;">
                        üíº –°–¥–µ–ª–∫–∞ #${deal.id}
                    </span>
                    <span style="font-size: 12px; padding: 4px 8px; border-radius: 12px; background: ${statusColor}; color: white;">
                        ${getDealStatusText(deal.status)}
                    </span>
                </div>
                <div style="margin-bottom: 8px;">
                    <strong>${deal.amount} ${deal.cryptocurrency}</strong> –∑–∞ <strong>${deal.total_amount} ${deal.fiat_currency}</strong>
                </div>
                <div style="font-size: 12px; color: var(--tg-theme-hint-color, #708499);">
                    –°–æ–∑–¥–∞–Ω–æ: ${new Date(deal.created_at).toLocaleString('ru')}
                </div>
            </div>
        `;
    });
    
    content.innerHTML = html;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfile() {
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }

    const content = document.getElementById('profileView');
    content.innerHTML = '<div class="loading"><div class="spinner"></div><p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p></div>';
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        const user = await getUserByTelegramID();
        if (!user) {
            displayProfile(currentUser);
            return;
        }

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥
        const [profileResponse, reviewsResponse, ratingResponse] = await Promise.all([
            fetch('/api/v1/auth/me', {
                headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
            }).catch(() => null),
            fetch(`/api/v1/reviews?user_id=${user.id}&limit=5`, {
                headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
            }).catch(() => null),
            fetch(`/api/v1/users/${user.id}/profile`, {
                headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
            }).catch(() => null)
        ]);

        let profileData = currentUser;
        let reviews = [];
        let stats = null;

        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç—ã
        if (profileResponse && profileResponse.ok) {
            const profileResult = await profileResponse.json();
            profileData = profileResult.user || currentUser;
        }

        if (reviewsResponse && reviewsResponse.ok) {
            const reviewsResult = await reviewsResponse.json();
            reviews = reviewsResult.reviews || [];
        }

        if (ratingResponse && ratingResponse.ok) {
            const statsResult = await ratingResponse.json();
            stats = statsResult;
        }

        displayProfileWithReviews(profileData, reviews, stats);
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        displayProfile(currentUser);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function getUserByTelegramID() {
    try {
        const response = await fetch('/api/v1/auth/me', {
            headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
        });
        
        if (response.ok) {
            const result = await response.json();
            return result.user;
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
    return null;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ—Ç–∑—ã–≤–∞–º–∏
function displayProfileWithReviews(user, reviews, stats) {
    const content = document.getElementById('profileView');
    
    const rating = stats?.average_rating || user.rating || 0;
    const totalReviews = stats?.total_reviews || 0;
    const stars = '‚≠ê'.repeat(Math.floor(rating)) + '‚òÜ'.repeat(5 - Math.floor(rating));
    const positivePercent = stats?.positive_percent || 0;
    
    let html = `
        <div style="padding: 16px;">
            <h2 style="margin-bottom: 16px; text-align: center;">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
            
            <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div style="text-align: center; margin-bottom: 24px;">
                <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">
                    ${user.first_name} ${user.last_name || ''}
                </div>
                <div style="font-size: 14px; color: var(--tg-theme-hint-color, #708499); margin-bottom: 12px;">
                    @${user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                </div>
                <div style="font-size: 16px; margin-bottom: 8px;">
                    ${stars} ${rating.toFixed(1)} (${totalReviews} –æ—Ç–∑—ã–≤–æ–≤)
                </div>
                ${positivePercent > 0 ? `
                <div style="font-size: 12px; color: #22c55e;">
                    ${positivePercent.toFixed(0)}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
                </div>` : ''}
            </div>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 24px;">
                <div style="text-align: center; padding: 12px; border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); border-radius: 8px;">
                    <div style="font-size: 18px; font-weight: 600; color: var(--tg-theme-link-color, #2481cc);">
                        ${user.total_deals || 0}
                    </div>
                    <div style="font-size: 11px; color: var(--tg-theme-hint-color, #708499);">
                        –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫
                    </div>
                </div>
                <div style="text-align: center; padding: 12px; border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); border-radius: 8px;">
                    <div style="font-size: 18px; font-weight: 600; color: #22c55e;">
                        ${user.successful_deals || 0}
                    </div>
                    <div style="font-size: 11px; color: var(--tg-theme-hint-color, #708499);">
                        –£—Å–ø–µ—à–Ω—ã—Ö
                    </div>
                </div>
            </div>
    `;
    
    // –û—Ç–∑—ã–≤—ã
    if (reviews && reviews.length > 0) {
        html += `
            <div style="margin-bottom: 16px;">
                <h3 style="font-size: 16px; margin-bottom: 12px;">üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã</h3>
        `;
        
        reviews.forEach(review => {
            const reviewStars = '‚≠ê'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
            const reviewDate = new Date(review.created_at).toLocaleDateString('ru');
            
            html += `
                <div style="border: 1px solid var(--tg-theme-section-separator-color, #e1e8ed); 
                            border-radius: 8px; padding: 12px; margin-bottom: 8px;
                            background: var(--tg-theme-bg-color, #ffffff);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                        <span style="font-size: 14px;">${reviewStars}</span>
                        <span style="font-size: 11px; color: var(--tg-theme-hint-color, #708499);">
                            ${reviewDate}
                        </span>
                    </div>
                    ${review.comment ? `
                    <div style="font-size: 13px; line-height: 1.4;">
                        ${review.comment}
                    </div>
                    ` : ''}
                    ${!review.is_anonymous ? `
                    <div style="font-size: 11px; color: var(--tg-theme-hint-color, #708499); margin-top: 6px;">
                        –û—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${review.from_user_id}
                    </div>
                    ` : ''}
                </div>
            `;
        });
        
        html += `</div>`;
    } else if (totalReviews === 0) {
        html += `
            <div style="text-center; padding: 20px; color: var(--tg-theme-hint-color, #708499);">
                üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
            </div>
        `;
    }
    
    html += `
            <div style="font-size: 11px; color: var(--tg-theme-hint-color, #708499); text-align: center; margin-top: 16px;">
                Telegram ID: ${user.telegram_id || user.id}
            </div>
        </div>
    `;
    
    content.innerHTML = html;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤)
function displayProfile(user) {
    displayProfileWithReviews(user, [], null);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
    const statusMap = {
        'active': '–ê–∫—Ç–∏–≤–Ω–∞',
        'matched': '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

function getDealStatusText(status) {
    const statusMap = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

// –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
async function cancelOrder(orderId) {
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/v1/orders/${orderId}`, {
            method: 'DELETE',
            headers: {
                'X-Telegram-User-ID': currentUser.id.toString()
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccess('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            loadMyOrders(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        } else {
            showError('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: ' + result.error);
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
async function createReview(dealId, toUserId, rating, comment, isAnonymous) {
    if (!currentUser) {
        showError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }
    
    try {
        const response = await fetch('/api/v1/reviews', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-ID': currentUser.id.toString()
            },
            body: JSON.stringify({
                deal_id: dealId,
                to_user_id: toUserId,
                rating: rating,
                comment: comment,
                is_anonymous: isAnonymous
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showSuccess('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            loadDeals(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
            closeReviewModal();
        } else {
            showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
function openReviewModal(dealId, toUserId) {
    const modal = document.getElementById('reviewModal');
    if (modal) {
        modal.classList.add('show');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        modal.dataset.dealId = dealId;
        modal.dataset.toUserId = toUserId;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('reviewRating').value = '5';
        document.getElementById('reviewComment').value = '';
        document.getElementById('reviewAnonymous').checked = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
        updateStarRating(5);
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∑—ã–≤–∞
function closeReviewModal() {
    const modal = document.getElementById('reviewModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateStarRating(rating) {
    const stars = document.querySelectorAll('.star-rating .star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.textContent = '‚≠ê';
            star.classList.add('active');
        } else {
            star.textContent = '‚òÜ';
            star.classList.remove('active');
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
function handleReviewSubmit() {
    const modal = document.getElementById('reviewModal');
    const dealId = parseInt(modal.dataset.dealId);
    const toUserId = parseInt(modal.dataset.toUserId);
    const rating = parseInt(document.getElementById('reviewRating').value);
    const comment = document.getElementById('reviewComment').value.trim();
    const isAnonymous = document.getElementById('reviewAnonymous').checked;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (rating < 1 || rating > 5) {
        showError('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥');
        return;
    }
    
    if (rating <= 2 && !comment) {
        showError('–î–ª—è –æ—Ü–µ–Ω–∫–∏ 1-2 –∑–≤–µ–∑–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        return;
    }
    
    if (comment.length > 500) {
        showError('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
    }
    
    createReview(dealId, toUserId, rating, comment, isAnonymous);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initTelegramWebApp();
    initNavigation();
    initModal();
    initReviewModal();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
function initReviewModal() {
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∑—ã–≤–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('reviewModal')) {
        const modalHTML = `
            <div id="reviewModal" class="modal" style="display: none;">
                <div class="modal-content" style="max-width: 400px;">
                    <div class="modal-header">
                        <h2>üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</h2>
                        <span class="close" onclick="closeReviewModal()">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div style="margin-bottom: 16px;">
                            <label style="display: block; margin-bottom: 8px; font-weight: 600;">–†–µ–π—Ç–∏–Ω–≥:</label>
                            <div class="star-rating" style="font-size: 24px; margin-bottom: 8px;">
                                <span class="star active" data-rating="1" onclick="setRating(1)">‚≠ê</span>
                                <span class="star active" data-rating="2" onclick="setRating(2)">‚≠ê</span>
                                <span class="star active" data-rating="3" onclick="setRating(3)">‚≠ê</span>
                                <span class="star active" data-rating="4" onclick="setRating(4)">‚≠ê</span>
                                <span class="star active" data-rating="5" onclick="setRating(5)">‚≠ê</span>
                            </div>
                            <input type="hidden" id="reviewRating" value="5">
                        </div>
                        
                        <div style="margin-bottom: 16px;">
                            <label for="reviewComment" style="display: block; margin-bottom: 8px; font-weight: 600;">
                                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
                            </label>
                            <textarea id="reviewComment" 
                                    style="width: 100%; height: 80px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; resize: vertical;" 
                                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ü–µ–Ω–æ–∫ 3-5 –∑–≤–µ–∑–¥)"
                                    maxlength="500"></textarea>
                            <div style="font-size: 12px; color: #666; text-align: right;">
                                <span id="commentLength">0</span>/500
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 16px;">
                            <label style="display: flex; align-items: center; font-size: 14px;">
                                <input type="checkbox" id="reviewAnonymous" style="margin-right: 8px;">
                                –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤
                            </label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="closeReviewModal()" 
                                style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; margin-right: 8px;">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="button" onclick="handleReviewSubmit()" 
                                style="background: #22c55e; color: white; border: none; padding: 8px 16px; border-radius: 4px;">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
        const commentField = document.getElementById('reviewComment');
        const lengthCounter = document.getElementById('commentLength');
        
        commentField.addEventListener('input', () => {
            lengthCounter.textContent = commentField.value.length;
        });
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∑–≤–µ–∑–¥—É
function setRating(rating) {
    document.getElementById('reviewRating').value = rating;
    updateStarRating(rating);
}

// =====================================================
// –û–¢–ö–õ–ò–ö–ò –ù–ê –ó–ê–Ø–í–ö–ò –ò –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–ï–ô
// =====================================================

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function openUserProfile(userId) {
    if (!userId || userId === 0) {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }

    console.log('[DEBUG] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', userId);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('profileModal')) {
        createProfileModal();
    }
    
    const modal = document.getElementById('profileModal');
    const content = document.getElementById('profileModalContent');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('show');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    content.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p>
        </div>
    `;
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [profileResponse, reviewsResponse] = await Promise.all([
            fetch(`/api/v1/users/${userId}/profile`, {
                headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
            }),
            fetch(`/api/v1/reviews?user_id=${userId}&limit=5`, {
                headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
            }).catch(() => null)
        ]);

        let profileData = null;
        let reviews = [];

        if (profileResponse && profileResponse.ok) {
            const result = await profileResponse.json();
            profileData = result.profile || result;
        }

        if (reviewsResponse && reviewsResponse.ok) {
            const result = await reviewsResponse.json();
            reviews = result.reviews || [];
        }

        displayUserProfileModal(profileData, reviews);
        
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        content.innerHTML = `
            <div class="text-center" style="padding: 20px;">
                <p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</p>
                <p style="font-size: 12px; color: #666;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</p>
            </div>
        `;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function displayUserProfileModal(profileData, reviews) {
    const content = document.getElementById('profileModalContent');
    
    if (!profileData) {
        content.innerHTML = `
            <div class="text-center" style="padding: 20px;">
                <p>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            </div>
        `;
        return;
    }

    const rating = profileData.average_rating || 0;
    const totalReviews = profileData.total_reviews || 0;
    const stars = '‚≠ê'.repeat(Math.floor(rating)) + '‚òÜ'.repeat(5 - Math.floor(rating));
    const positivePercent = profileData.positive_percent || 0;
    
    let html = `
        <div class="text-center" style="margin-bottom: 20px;">
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px; color: var(--tg-theme-text-color, #000000);">
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${profileData.user_id}
            </div>
            <div style="font-size: 16px; margin-bottom: 8px;">
                ${stars} ${rating.toFixed(1)} (${totalReviews} –æ—Ç–∑—ã–≤–æ–≤)
            </div>
            ${positivePercent > 0 ? `
            <div style="font-size: 13px; color: #22c55e;">
                ${positivePercent.toFixed(0)}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            </div>` : ''}
        </div>
        
        <div class="profile-stats-grid">
            <div class="profile-stat-card">
                <div class="profile-stat-number">${totalReviews}</div>
                <div class="profile-stat-label">–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤</div>
            </div>
            <div class="profile-stat-card">
                <div class="profile-stat-number" style="color: #22c55e;">${Math.round(positivePercent)}%</div>
                <div class="profile-stat-label">–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö</div>
            </div>
        </div>
    `;
    
    // –û—Ç–∑—ã–≤—ã
    if (reviews && reviews.length > 0) {
        html += `
            <div class="profile-reviews-section">
                <div class="profile-reviews-title">üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã</div>
        `;
        
        reviews.slice(0, 3).forEach(review => {
            const reviewStars = '‚≠ê'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
            const reviewDate = new Date(review.created_at).toLocaleDateString('ru');
            
            html += `
                <div class="profile-review-card">
                    <div class="profile-review-header">
                        <span class="profile-review-stars">${reviewStars}</span>
                        <span class="profile-review-date">${reviewDate}</span>
                    </div>
                    ${review.comment ? `
                    <div class="profile-review-comment">
                        ${review.comment}
                    </div>
                    ` : ''}
                </div>
            `;
        });
        
        html += `</div>`;
    } else {
        html += `
            <div class="text-center" style="padding: 20px; color: var(--tg-theme-hint-color, #666); font-size: 13px;">
                üìù –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤
            </div>
        `;
    }
    
    content.innerHTML = html;
}

// –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É
async function respondToOrder(orderId) {
    if (!currentUser) {
        showError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        return;
    }

    if (!orderId || orderId === 0) {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
        return;
    }

    console.log('[DEBUG] –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É ID:', orderId);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('respondModal')) {
        createRespondModal();
    }
    
    const modal = document.getElementById('respondModal');
    const orderDetails = document.getElementById('respondOrderDetails');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('show');
    modal.dataset.orderId = orderId;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    orderDetails.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ...</p>
        </div>
    `;
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
        const response = await fetch(`/api/v1/orders/${orderId}`, {
            headers: { 'X-Telegram-User-ID': currentUser.id.toString() }
        });
        
        const result = await response.json();
        
        if (result.success && result.order) {
            displayOrderDetails(result.order);
        } else {
            orderDetails.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏</p>';
        }
        
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–∫–∏:', error);
        orderDetails.innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –æ—Ç–∫–ª–∏–∫–∞
function displayOrderDetails(order) {
    const orderDetails = document.getElementById('respondOrderDetails');
    
    const totalAmount = order.total_amount || (order.amount * order.price);
    
    orderDetails.innerHTML = `
        <div class="order-info-card">
            <div class="order-info-title">
                ${order.type === 'buy' ? 'üü¢ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É' : 'üî¥ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É'}
            </div>
            <div class="order-info-row">
                <span class="order-info-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                <span class="order-info-value">${order.amount} ${order.cryptocurrency}</span>
            </div>
            <div class="order-info-row">
                <span class="order-info-label">–ö—É—Ä—Å:</span>
                <span class="order-info-value">${order.price} ${order.fiat_currency}</span>
            </div>
            <div class="order-info-row">
                <span class="order-info-label">–û–±—â–∞—è —Å—É–º–º–∞:</span>
                <span class="order-info-value" style="color: #22c55e; font-size: 16px;">
                    ${totalAmount.toFixed(2)} ${order.fiat_currency}
                </span>
            </div>
            <div class="order-info-row">
                <span class="order-info-label">–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</span>
                <span class="order-info-value">${(order.payment_methods || []).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            ${order.description ? `
            <div style="margin-top: 12px; padding-top: 12px; border-top: 1px solid var(--tg-theme-section-separator-color, #e1e8ed);">
                <div class="order-info-label" style="margin-bottom: 4px;">–û–ø–∏—Å–∞–Ω–∏–µ:</div>
                <div style="font-size: 13px; color: var(--tg-theme-text-color, #000000);">
                    ${order.description}
                </div>
            </div>
            ` : ''}
        </div>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
async function submitResponse() {
    const modal = document.getElementById('respondModal');
    const orderId = parseInt(modal.dataset.orderId);
    const message = document.getElementById('respondMessage').value.trim();
    const autoAccept = document.getElementById('respondAutoAccept').checked;
    
    if (!currentUser) {
        showError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        return;
    }
    
    if (!orderId || orderId === 0) {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitBtn = modal.querySelector('button[onclick="submitResponse()"]');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    try {
        console.log('[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É:', { orderId, message, autoAccept });
        
        // –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞—è–≤–∫–∏
        const dealData = {
            order_id: orderId,
            message: message,
            auto_accept: autoAccept
        };
        
        const response = await fetch('/api/v1/deals', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-User-ID': currentUser.id.toString()
            },
            body: JSON.stringify(dealData)
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            console.log('[INFO] –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.deal);
            showSuccess(`‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–¥–µ–ª–∫–∞ #${result.deal.id} —Å–æ–∑–¥–∞–Ω–∞`);
            closeRespondModal();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏ —Å–¥–µ–ª–æ–∫
            loadOrders();
            if (document.querySelector('.nav-item[onclick*="deals"]').classList.contains('active')) {
                loadDeals();
            }
        } else {
            console.warn('[WARN] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', result.error);
            showError(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É');
        }
        
    } catch (error) {
        console.error('[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫–ª–∏–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
function createProfileModal() {
    const modalHTML = `
        <div id="profileModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
                    <button class="modal-close" onclick="closeProfileModal()">&times;</button>
                </div>
                <div class="modal-body" id="profileModalContent">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
                    </div>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ  
function createRespondModal() {
    const modalHTML = `
        <div id="respondModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">ü§ù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞—è–≤–∫—É</div>
                    <button class="modal-close" onclick="closeRespondModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <div id="respondOrderDetails">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ...</p>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                        <textarea id="respondMessage" class="form-textarea" rows="3" maxlength="200" 
                                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ, –∂–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–∞"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label style="display: flex; align-items: center; font-size: 14px; cursor: pointer;">
                            <input type="checkbox" id="respondAutoAccept" checked style="margin-right: 8px;">
                            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è
                        </label>
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" onclick="closeRespondModal()" class="btn btn-secondary">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="button" onclick="submitResponse()" class="btn btn-success">
                            üöÄ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeProfileModal() {
    const modal = document.getElementById('profileModal');
    if (modal) {
        modal.classList.remove('show');
    }
}

function closeRespondModal() {
    const modal = document.getElementById('respondModal');
    if (modal) {
        modal.classList.remove('show');
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('respondMessage').value = '';
        document.getElementById('respondAutoAccept').checked = true;
    }
}